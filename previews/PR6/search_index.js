var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Logging-Levels","page":"API","title":"Logging Levels","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [LoggingCommon]\nOrder   = [:constant, :type, :function] \nPages   = [\"levels.jl\"]\nPrivate = false","category":"page"},{"location":"api/#LoggingCommon.AboveMax","page":"API","title":"LoggingCommon.AboveMax","text":"AboveMax\n\nAlias for LogLevel(2147483646)::Base.Logging.LogLevel\n\n\n\n\n\n","category":"constant"},{"location":"api/#LoggingCommon.Alert","page":"API","title":"LoggingCommon.Alert","text":"Alert\n\nAlias for LogLevel(2010)::Base.Logging.LogLevel\n\n\n\n\n\n","category":"constant"},{"location":"api/#LoggingCommon.All","page":"API","title":"LoggingCommon.All","text":"All\n\nAlias for LogLevel(-2147483647)::Base.Logging.LogLevel\n\n\n\n\n\n","category":"constant"},{"location":"api/#LoggingCommon.Critical","page":"API","title":"LoggingCommon.Critical","text":"Critical\n\nAlias for LogLevel(2001)::Base.Logging.LogLevel\n\n\n\n\n\n","category":"constant"},{"location":"api/#LoggingCommon.Emergency","page":"API","title":"LoggingCommon.Emergency","text":"Emergency\n\nAlias for LogLevel(2100)::Base.Logging.LogLevel\n\n\n\n\n\n","category":"constant"},{"location":"api/#LoggingCommon.Fatal","page":"API","title":"LoggingCommon.Fatal","text":"Fatal\n\nAlias for LogLevel(2147483645)::Base.Logging.LogLevel\n\n\n\n\n\n","category":"constant"},{"location":"api/#LoggingCommon.NotSet","page":"API","title":"LoggingCommon.NotSet","text":"NotSet\n\nAlias for LogLevel(-2147483648)::Base.Logging.LogLevel\n\n\n\n\n\n","category":"constant"},{"location":"api/#LoggingCommon.Notice","page":"API","title":"LoggingCommon.Notice","text":"Notice\n\nAlias for LogLevel(1)::Base.Logging.LogLevel\n\n\n\n\n\n","category":"constant"},{"location":"api/#LoggingCommon.Off","page":"API","title":"LoggingCommon.Off","text":"Off\n\nAlias for LogLevel(2147483647)::Base.Logging.LogLevel\n\n\n\n\n\n","category":"constant"},{"location":"api/#LoggingCommon.Trace","page":"API","title":"LoggingCommon.Trace","text":"Trace\n\nAlias for LogLevel(-1001)::Base.Logging.LogLevel\n\n\n\n\n\n","category":"constant"},{"location":"api/#LoggingCommon.NamedLogLevel","page":"API","title":"LoggingCommon.NamedLogLevel","text":"NamedLogLevel(name::Symbol)\n\nRepresents a logging level with an associated name\n\n\n\n\n\n","category":"type"},{"location":"api/#LoggingCommon.is_valid_log_level-Tuple{Symbol}","page":"API","title":"LoggingCommon.is_valid_log_level","text":"is_valid_log_level(level::Symbol) -> Bool\n\nReturns true if level is a known log level \n\n\n\n\n\n","category":"method"},{"location":"api/#LoggingCommon.log_level","page":"API","title":"LoggingCommon.log_level","text":"log_level(level) -> LogLevel\n\nConverts the input level to a LogLevel type\n\n\n\n\n\n","category":"function"},{"location":"api/#LoggingCommon.log_level_name-Tuple{NamedLogLevel}","page":"API","title":"LoggingCommon.log_level_name","text":"log_level_name(level) -> String\n\nReturns the name associated with level as a String\n\n\n\n\n\n","category":"method"},{"location":"api/#LoggingCommon.nearest_log_level-Tuple{Base.CoreLogging.LogLevel}","page":"API","title":"LoggingCommon.nearest_log_level","text":"nearest_log_level(input::LogLevel) -> Symbol\n\nReturns the first named log level L with log_level(L) â‰¥ input\n\n\n\n\n\n","category":"method"},{"location":"api/#LoggingCommon.validate_log_level-Tuple{Symbol}","page":"API","title":"LoggingCommon.validate_log_level","text":"validate_log_level(level::Symbol)\n\nThrows an UnknownLogLevelException if level is not a known named log level. Otherwise, returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"api/#Logging-Records","page":"API","title":"Logging Records","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [LoggingCommon]\nOrder   = [:constant, :type, :function] \nPages   = [\"records.jl\"]\nPrivate = false","category":"page"},{"location":"api/#LoggingCommon.AbstractLogRecord","page":"API","title":"LoggingCommon.AbstractLogRecord","text":"AbstractLogRecord\n\nAbstract supertype of all log records \n\n\n\n\n\n","category":"type"},{"location":"api/#LoggingCommon.LogRecord","page":"API","title":"LoggingCommon.LogRecord","text":"LogRecord(static_meta, runtime_meta, record, data)\n\nLogRecord(static_meta, runtime_meta, record, args...)\n\nLogRecord(static_meta, record, args...; runtime_meta=RuntimeLogRecordMetadata())\n\nA log record with an associated StaticLogRecordMetadata, RuntimeLogRecordMetadata, LogRecordData and an underlying record. If data is not provided, it is constructed from args.... \n\nArguments\n\nstatic_meta::StaticLogRecordMetadata - Static log record metadata \nruntime_meta::RuntimeLogRecordMetadata - Runtime log record metadata \nrecord::AbstractLogRecord - Underlying record\ndata::LogRecordData - Optional key => value pairs attached to record. Constructed from args... if not provided. \n\n\n\n\n\n","category":"type"},{"location":"api/#LoggingCommon.LogRecordData","page":"API","title":"LoggingCommon.LogRecordData","text":"LogRecordData(data)\n\nLogRecordData(args::Pair{<:Any, <:Any}...)\n\nA type representing an optional collection of key => value pairs attached to a log record. \n\ndata must be an iterable collection where each element is a Pair\n\n\n\n\n\n","category":"type"},{"location":"api/#LoggingCommon.MessageLogRecord","page":"API","title":"LoggingCommon.MessageLogRecord","text":"MessageLogRecord(message::AbstractString)\n\nA type representing a log record with an associated message \n\n\n\n\n\n","category":"type"},{"location":"api/#LoggingCommon.RuntimeLogRecordMetadata","page":"API","title":"LoggingCommon.RuntimeLogRecordMetadata","text":"RuntimeLogRecordMetadata(datetime::DateTime, thread_id::Int, worker_id::Int)\n\nRuntimeLogRecordMetadata(; datetime=Dates.now(), thread_id::Int=Threads.threadid(), worker_id::Int=_worker_id())\n\nComponents of a generic log record which are known at runtime\n\n\n\n\n\n","category":"type"},{"location":"api/#LoggingCommon.StacktraceLogRecord","page":"API","title":"LoggingCommon.StacktraceLogRecord","text":"StacktraceLogRecord(staticmeta, runtimemeta, exception, stacktrace, data)    StacktraceLogRecord(staticmeta, stacktrace, data; runtimemeta=RuntimeLogRecordMetadata(), exception=nothing)    StacktraceLogRecord(staticmeta, stacktrace, args...; runtimemeta=RuntimeLogRecordMetadata(), exception=nothing)\n\nAn AbstractLogRecord type with an associated stacktrace and optional exception and a collection of key-value data. \n\nArguments\n\nstatic_meta::StaticLogRecordMetadata - Static log record metadata \nruntime_meta[_metadata]::RuntimeLogRecordMetadata - Runtime log record metadata \nexception::Union{Nothing,Exception} - Exception for log record\nstacktrace::Base.StackTraces.StackTrace - Stacktrace for log record\ndata::LogRecordData - Optional key => value pairs attached to record. Constructed from args... if not provided.\n\n\n\n\n\n","category":"type"},{"location":"api/#LoggingCommon.StaticLogRecordMetadata","page":"API","title":"LoggingCommon.StaticLogRecordMetadata","text":"StaticLogRecordMetadata(source::String, level::LogLevel, level_name::String, filename::Union{String,Nothing}, line_num::Int [, group=nothing] [, id=nothing])\n\nComponents of a generic log record that are known at compile time\n\n\n\n\n\n","category":"type"},{"location":"api/#LoggingCommon.add_record_data!-Union{Tuple{K}, Tuple{LogRecordData{K}, Pair{K}}} where K","page":"API","title":"LoggingCommon.add_record_data!","text":"add_record_data!(r, data::Pair)\n\nAdds the data := key => value pair to r\n\n\n\n\n\n","category":"method"},{"location":"api/#LoggingCommon.is_error_record-Tuple{Any}","page":"API","title":"LoggingCommon.is_error_record","text":"is_error_record(record)\n\nReturns true if record is a log record associated with an error/exception, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#LoggingCommon.log_record_data-Tuple{AbstractLogRecord}","page":"API","title":"LoggingCommon.log_record_data","text":"log_record_data(record)\n\nReturns an iterator over the key => value pairs associated with record\n\n\n\n\n\n","category":"method"},{"location":"api/#LoggingCommon.log_record_data-Tuple{Type, Any}","page":"API","title":"LoggingCommon.log_record_data","text":"log_record_data([KeyType], kv_pairs; [exclude=()]) -> LogRecordData\n\nReturns a LogRecordData from the input key::KeyType => value pairs.\n\nIf KeyType is not provided, it will be inferred from a set of non-empty kv_pairs.\n\n\n\n\n\n","category":"method"},{"location":"api/#LoggingCommon.log_record_data-Tuple{}","page":"API","title":"LoggingCommon.log_record_data","text":"log_record_data() -> LogRecordData{Symbol}\n\n\n\n\n\n","category":"method"},{"location":"api/#LoggingCommon.message_log_record-Tuple{StaticLogRecordMetadata, AbstractString, Vararg{Any}}","page":"API","title":"LoggingCommon.message_log_record","text":"message_log_record(static_meta::StaticLogRecordMetadata, message::AbstractString, data; [runtime_meta = RuntimeLogRecordMetadata()])\n\n\n\n\n\n","category":"method"},{"location":"api/#LoggingCommon.runtime_metadata-Tuple{AbstractLogRecord}","page":"API","title":"LoggingCommon.runtime_metadata","text":"runtime_metadata(record)\n\nReturns the RuntimeLogRecordMetadata associated with record or nothing if it is not present\n\n\n\n\n\n","category":"method"},{"location":"api/#LoggingCommon.static_metadata-Tuple{AbstractLogRecord}","page":"API","title":"LoggingCommon.static_metadata","text":"static_metadata(record)\n\nReturns the StaticLogRecordMetadata associated with record or nothing if it is not present\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = LoggingCommon","category":"page"},{"location":"#LoggingCommon","page":"Home","title":"LoggingCommon","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LoggingCommon provides some definitions that are useful as the basis for creating a generic logging framework, slightly extending the types and methods introduced in Base.Logging.","category":"page"}]
}
